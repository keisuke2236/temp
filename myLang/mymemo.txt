int a = 3


読み込んだファイルをオブジェクトとして保持する。
インスタンス変数
メソッドが重要なのではなくデータが重要つまり
new class naeで作られたときにデータが作られて。
オブジェクトが消えるまでずっと保持される。

初期化する目的で使用するのがコンストラクタ

オブジェクトが消える瞬間とは：ガーベジコレクター
変数がなくなるので注意,そのオブジェクトを参照している変数がなくなったときに自動的に消える。


インターフェイスは複数継承し、使用することができる
親クラスは１つしかないけど継承は自由

get
expect
unget

とりあえず作るものはget

ここでは軸を作る、変数、予約語、数字を一個一個ファイルからとってくる。

lexicalAnalyzerImpl

１：コンストラクタの作成
　クラスが作られたときに自動的に呼ばれるもの
　return文がそもそもない
　引数を取ることができる。


２：インスタンス変数として持っておくべき変数。
　inputstreamを持っておけば読み込むべきファイルを保持することができる。
　呼び出すたびに一文字つづ持ってきてくれる。（状態を保持しているものがinputstream)
　どこまで、何バイトまで読んだかも全て記録してくれている。
  inputstreamを初期化するのはコンストラクタ。

3:ファイルを読み込み終わってしまった場合の処理
  return new LexicalUnit(LexicalType.EOF);//EOF
  このように様々な判定条件の元getで呼ばれた時の返送return作業をどんどん加えていく。


レポートはソースと解説と実行結果があればおk



文法解析



プログラミングソースの解析はどの言語も同じようにできている。

生成文法：文法に即して実際の言葉を書くためにはこのような手順で書くというものがある
        プログラムの書き方の規則：書き換え、記号があったらその記号はこの記号であると定義するような書き方。

        プログラミング言語の文法はこれでとても明確になった。
        
        書かれたプログラムをコンパイルする段階

